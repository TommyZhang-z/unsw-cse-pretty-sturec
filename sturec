#!/usr/bin/python3


import re
import subprocess
import typing as t
from rich import box
from rich.color import Color
from rich.console import Console
from rich.markdown import Markdown
from rich.style import Style
from rich.table import Table

# Constants
WIDTH = 65
BOX = box.DOUBLE


class ClassInfoType(t.TypedDict):
    course_alpha: str
    course_code: int
    term: int
    role: str
    expiry: str


class ResultDataType(t.TypedDict):
    ClassKey: str
    StudentID: str
    Name: dict[str, str]
    Program: str
    Plans: str
    Login: str
    tut_lab: str


class StudentRecord:
    stdout: t.Union[str, None] = None
    stderr: t.Union[str, None] = None
    info: t.Union[ResultDataType, None] = None

    def __init__(self, course_code: int = None, width: int = WIDTH, box_style=BOX) -> None:
        self.course_code: int = course_code
        self.width = width
        self.pattern = None
        self.box_style = box_style
        self.console = Console(width=width)

    def run(self) -> None:
        if self.course_code is None:
            self.get_default_class()

        with self.console.status("[bold green]Loading...[/bold green]"):
            self.run_sturec()
            self.check_error()

            self.info = self.re_parse_result()
            if not self.info:
                self.console.print(
                    f"[red] Could not load the required course: {self.course_code}. [/red]")
                exit(1)

            lines = re.split(r"\n", self.stdout)
            test_style = Style(color=Color.from_rgb(58, 170, 197))
            table = Table(width=WIDTH, box=self.box_style)
            table.add_column("Test", justify="left",
                             style=test_style, no_wrap=True, min_width=20)
            table.add_column("Mark", justify="left")
            table.add_column("Status", justify="left", style="white")
            self.add_rows(table, lines)

        first_name, last_name = self.info['Name'].values()
        markdown = "# Student Record\n"
        markdown += f'-  **Name**    :  {first_name} {last_name}\n'
        markdown += f'-  **zID**     :  {self.info.get("Login", "?")}\n'
        markdown += f'-  **Course**  :  {self.info.get("ClassKey", "?")}\n'
        markdown += f'-  **Tut/Lab** :  {self.info.get("tut_lab", "?")}\n'
        markdown += f'-  **Program** :  {self.info.get("Program", "?")}\n'
        markdown += f'-  **Plans**   :  {self.info.get("Plans", "?")}\n'
        self.console.print(Markdown(markdown))
        self.console.print("")
        self.console.print(table)

    def check_error(self) -> None:
        if self.stderr:
            self.console.print(
                f"[red] Could not load the required course: {self.course_code}. [/red]")
            exit(1)

    def run_shell_command(self, command: str) -> None:
        result = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True
        ).communicate()
        self.stdout, self.stderr = list(
            map(lambda x: x.decode("utf-8"), result))

    def run_sturec(self) -> None:
        self.run_shell_command(f"{self.course_code} classrun -sturec")

    def get_default_class(self) -> None:
        self.run_shell_command("acc format=\'$CLASSES\'")
        self.check_error()
        self.pattern = re.compile(r'([A-Z]{4})(\d{4})t(\d)_(.+?)\[(\d+)]')
        classes = self.stdout.strip().split(",")
        courses: t.List[ClassInfoType] = []

        for c in classes:
            parsed = self.re_parse_class(c)
            if parsed:
                if parsed["course_alpha"].lower() != "comp":
                    self.console.print(
                        f"Class {parsed['course_alpha']} is not supported.")
                    continue
                courses.append(parsed)

        if len(courses) == 0:
            self.console.print("Could not find any supported classes.")
            exit(1)

        if len(courses) == 1:
            self.course_code = courses[0]["course_code"]
            # The user is on only enrolled in one course - just use that course code.
            return

        # Prints a table of the courses and their codes.
        self.print_courses_table(courses)
        selection = self.console.input(
            f"[green] You're enrolled in multiple classes. Please select one [{0}-{len(courses) - 1}]: [/green]")
        try:
            selection = int(selection)
        except ValueError:
            self.console.print("[red] Invalid selection. [/red]")
            exit(1)

        if selection < 0 or selection >= len(courses):
            self.console.print("[red] Invalid selection. [/red]")
            exit(1)

        self.course_code = courses[selection]["course_code"]

    def print_courses_table(self, courses: t.List[ClassInfoType]) -> None:
        table = Table(width=self.width, box=self.box_style)
        table.add_column("Selection", style="bold")
        table.add_column("Course")
        table.add_column("Code")
        table.add_column("Term")
        table.add_column("Role")
        table.add_column("Expiry")
        for i, course in enumerate(courses):
            table.add_row(
                str(i),
                course["course_alpha"],
                str(course["course_code"]),
                f'Term {course["term"]}',
                course["role"],
                str(course["expiry"])
            )
        self.console.print(table)

    def re_parse_class(self, c: str) -> t.Union[ClassInfoType, None]:
        """
        Parses the class record in the format:
        <class(4, alpha)><class_code(4, int)>t<term(1, int)>_<role(?, char)>[expiry(8, str)]

        Example:
        COMP2521t2_Student[20220926]

        Returns a dictionary containing the parsed data, or None if the class is
        not in the format above.
        """
        match_obj = self.pattern.match(c)
        if match_obj:
            course_alpha, course_code, term, role, expiry = match_obj.groups()
            return {
                "course_alpha": course_alpha,
                "course_code": course_code,
                "term": term,
                "role": role,
                "expiry": expiry
            }
        return None

    def re_parse_result(self) -> t.Union[ResultDataType, None]:
        try:
            data = {'ClassKey': re.search(r"ClassKey: (\S+)", self.stdout).group(1),
                    'StudentID': re.search(r"StudentID: (\S+)", self.stdout).group(1),
                    'Program': re.search(r"Program: (\S+)", self.stdout).group(1),
                    'Plans': re.search(r"Plans: (\S+)", self.stdout).group(1),
                    'Login': re.search(r"Login: (\S+)", self.stdout).group(1),
                    'tut_lab': re.search(r"tut_lab: (\S+)", self.stdout).group(1)}
            last_name, first_name = re.findall(
                r"Name: (\S+), (\S+)", self.stdout)[0]
            data['Name'] = {"first_name": first_name, "last_name": last_name}
            return data
        except AttributeError:
            return None

    def add_rows(self, table: Table, lines: t.List[str]) -> None:
        # ignore first line
        for line in lines[1:]:

            # ignore empty lines
            if not line:
                continue

            result = re.split(r":\s", line.rstrip())

            # ignore lines with useless data
            if len(result) != 2:
                continue

            test_name, score_prompt = result
            if re.search(r"\d+$", score_prompt) and test_name not in self.info.keys():
                score, total = list(
                    map(lambda s: None if s in ".?" else float(s), re.split(r"/", score_prompt)))

                if test_name.endswith('_latepen'):
                    # Invert the marks for the late penalty, as a 0/? is the ideal mark.
                    # * Note that this does not affect the actual display of the mark - that's
                    # * controlled by the `score_prompt`.
                    if score is not None and total is not None:
                        score = total - score

                # must use "score is None" since "not score" also pass when score == 0
                if score is None:
                    table.add_row(test_name, score_prompt, "TBA")
                elif score == total:
                    table.add_row(test_name, score_prompt, "ðŸ”¥")
                else:
                    table.add_row(test_name, score_prompt,
                                  "[green]:heavy_check_mark:[/green]")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('course_code', nargs="?")
    args = parser.parse_args()

    if args.course_code:
        sturec = StudentRecord(args.course_code)
    else:
        sturec = StudentRecord()

    sturec.run()
